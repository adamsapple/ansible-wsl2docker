---
- hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: apt install dependency module.
      apt:
        update_cache: yes
        name:
          - daemonize
          - dbus
          - gawk
          - libc6
          - policykit-1
          - python3
          - python3-pip
          - python3-psutil
          - systemd
          - systemd-container
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

    - name: mkdir /etc/apt/trusted.gpg.d
      file: path=/etc/apt/trusted.gpg.d state=directory mode="u=rwx,g=rx,o=rx"

    - name: download wsl-transdebian.gpg
      get_url:
        url: https://arkane-systems.github.io/wsl-transdebian/apt/wsl-transdebian.gpg
        dest: /etc/apt/trusted.gpg.d/
        mode: 0644
        force: true

    - name: make wsl-transdebian.list
      shell:
        cmd: |
          cat << EOF > /etc/apt/sources.list.d/wsl-transdebian.list
          deb https://arkane-systems.github.io/wsl-transdebian/apt/ $(lsb_release -cs) main
          deb-src https://arkane-systems.github.io/wsl-transdebian/apt/ $(lsb_release -cs) main
          EOF

    - name: apt install dotnet5.0 runtine.
      apt:
        update_cache: yes
        name: systemd-genie

    - name: edit genie.ini.
      shell: |
        echo "# タイムアウトを20秒に設定"
        sed -i 's/systemd-timeout.*/systemd-timeout=20/g' /etc/genie.ini
        echo "# ホスト表示に-wslが追加されないように設定"
        sed -i 's/update-hostname.*/update-hostname=false/g' /etc/genie.ini
        echo "# sshdエラー回避の設定"
        ssh-keygen -A

    - name: exec genie.
      ignore_errors: true
      shell: genie -s
    
    - name: systemctl set-default
      command: systemctl set-default multi-user.target

    - name: systemctl disable getty@tty1
      command: systemctl disable getty@tty1

    - name: systemctl disable multipathd.socket
      command: systemctl disable multipathd.socket

    - name: systemctl enable docker
      command: systemctl enable docker

    - name: systemctl start docker
      command: systemctl start docker

    #- name: e2label /dev/sdb cloudimg-rootfs
    #  ignore_errors: true
    #  command: e2label /dev/sdb cloudimg-rootfs

    - name: edit docker.service.
      shell: |
        sed -i 's|^ExecStart=\(.*\)$|#ExecStart=\1\nExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://127.0.0.1:2735 --containerd=/run/containerd/containerd.sock|g' /etc/systemd/system/multi-user.target.wants/docker.service

    - name: download docker.gpg
      ansible.builtin.uri:
        url: https://download.docker.com/linux/ubuntu/gpg
        return_content: yes
      register: docker_gpg_txt

    - name: docker gpg dearmoring.
      ignore_errors: true
      ansible.builtin.shell:
        argv: 
          - gpg
          - --dearmor
          - --yes
          - -o
          - /etc/apt/trusted.gpg.d/docker.gpg
        stdin: "{{ docker_gpg_txt.content }}"

    - name: make docker.list
      shell:
        cmd: |
          cat << EOF > /etc/apt/sources.list.d/docker.list
          deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable
          EOF

    - name: apt install docker.
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin

    - name: get uname -s
      shell: uname -s
      register: uname_s
      changed_when: False

    - name: get uname -m
      shell: uname -m
      register: uname_m
      changed_when: False

    - name: download docker-compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.10.0/docker-compose-{{uname_s.stdout}}-{{uname_m.stdout}}"
        dest: /usr/local/bin/docker-compose
        mode: 0754
        force: true

    - name: Create a docker-compose symbolic link
      ansible.builtin.file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link

    - name: get user.
      become: false
      shell: echo $USER
      register: remote_user
      changed_when: False
        
    - name: Add remote user to docker group.
      user:
        name: "{{ remote_user.stdout }}"
        group: docker
        append: yes

    - name: edit ~/.bashrc for run genie on login.
      become: false
      blockinfile:
        path: ~/.bashrc
        block: |
          # Are we in the bottle?
          if [[ ! -v INSIDE_GENIE ]]; then
              read -t 3 -p "Preparing to enter genie bottle (in 3s); abort? (y/N) ..." yn
              case "$yn" in
                  [yY]*) echo "abort." ;  ;;
                  *) echo "Starting genie."; exec /usr/bin/genie -s ;;
              esac
          else
              echo "entering genie bottle."
          fi